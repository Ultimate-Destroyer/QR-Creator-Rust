name: Rust Release

on:
  push:
    tags:
      - '*'

permissions:
  contents: write

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu
          components: rustfmt, clippy

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "linux-build"

      - name: Build Binary
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu
          strip target/x86_64-unknown-linux-gnu/release/*

      - name: Prepare artifacts
        run: |
          mkdir -p artifacts/linux
          # Get binary name from Cargo.toml
          BINARY_NAME=$(cargo metadata --format-version 1 | jq -r '.packages[0].targets[0].name')
          cp target/x86_64-unknown-linux-gnu/release/$BINARY_NAME artifacts/linux/
          cd artifacts/linux
          tar czf ../${BINARY_NAME}_linux_x86_64.tar.gz *
          cd ../..

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: artifacts/*.tar.gz
          retention-days: 1

  build-windows:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-gnu
          components: rustfmt, clippy

      - name: Install MinGW
        run: |
          sudo apt-get update
          sudo apt-get install -y mingw-w64
          sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
          sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "windows-build"

      - name: Build Binary
        run: cargo build --release --target x86_64-pc-windows-gnu

      - name: Prepare artifacts
        run: |
          mkdir -p artifacts/windows
          # Get binary name from Cargo.toml
          BINARY_NAME=$(cargo metadata --format-version 1 | jq -r '.packages[0].targets[0].name')
          cp target/x86_64-pc-windows-gnu/release/$BINARY_NAME.exe artifacts/windows/
          cd artifacts/windows
          zip ../${BINARY_NAME}_windows_x86_64.zip *
          cd ../..

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: artifacts/*.zip
          retention-days: 1

  release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          files: |
            linux-artifacts/*
            windows-artifacts/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.YOUR_PAT_SECRET }}
